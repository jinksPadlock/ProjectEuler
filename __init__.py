import math

########################################################################################################################
# Euler 1
########################################################################################################################
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.
########################################################################################################################


def e_1_brute():
    sum_of_multiples = 0
    for i in range(3, 1000):
        if i % 3 == 0 or i % 5 == 0:
            sum_of_multiples = sum_of_multiples + i
    print(sum_of_multiples)


def e_1_elegant_mult_n(m, n):
    sum_of_multiples = m * (math.floor(n/m) * (math.floor(n/m)+1))/2
    return sum_of_multiples


def e_1_elegant():
    # sum_of_mults_of_three = 3 * (math.floor(999/3) * (math.floor(999/3)+1))/2
    sum_of_mults_of_three = e_1_elegant_mult_n(3, 999)
    # sum_of_mults_of_five = 5 * (math.floor(999 / 5) * (math.floor(999 / 5) + 1)) / 2
    sum_of_mults_of_five = e_1_elegant_mult_n(5, 999)
    # sum_of_mults_of_three_and_five = 15 * (math.floor(999 / 15) * (math.floor(999 / 15) + 1)) / 2
    sum_of_mults_of_three_and_five = e_1_elegant_mult_n(15, 999)
    sum_of_multiples = sum_of_mults_of_three + sum_of_mults_of_five - sum_of_mults_of_three_and_five
    print(int(sum_of_multiples))


########################################################################################################################
# Euler 2
########################################################################################################################
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
#  By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms:
########################################################################################################################

def e_2_brute():
    fib1 = 1
    fib2 = 1
    result_fib = 0
    fib_sum = 0

    while result_fib < 4000000:
        if result_fib % 2 == 0:
            fib_sum = fib_sum + result_fib

        result_fib = fib1 + fib2
        fib1 = fib2
        fib2 = result_fib

    print(fib_sum)


def e_2_elegant_ish():
    fib_fn_3 = 2
    fib_fn_6 = 0
    result_fib = 2
    fib_sum = 0

    while result_fib < 4000000:
        fib_sum += result_fib

        result_fib = 4 * fib_fn_3 + fib_fn_6
        fib_fn_6 = fib_fn_3
        fib_fn_3 = result_fib

    print(fib_sum)


if __name__ == '__main__':
    # e_1_brute()
    # e_1_elegant()
    e_2_brute()
    e_2_elegant_ish()



